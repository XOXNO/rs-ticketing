// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct AggregatorContractProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for AggregatorContractProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = AggregatorContractProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        AggregatorContractProxyMethods { wrapped_tx: tx }
    }
}

pub struct AggregatorContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> AggregatorContractProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
    >(
        self,
        egld_wrapper_address: Arg0,
        egld_wrapped_token_id: Arg1,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&egld_wrapper_address)
            .argument(&egld_wrapped_token_id)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> AggregatorContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn aggregate_egld<
        Arg0: ProxyArg<ManagedVec<Env::Api, AggregatorStep<Env::Api>>>,
        Arg1: ProxyArg<ManagedVec<Env::Api, TokenAmount<Env::Api>>>,
        Arg2: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        steps: Arg0,
        limits: Arg1,
        protocol: Arg2,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("aggregateEgld")
            .argument(&steps)
            .argument(&limits)
            .argument(&protocol)
            .original_result()
    }

    pub fn aggregate_esdt<
        Arg0: ProxyArg<ManagedVec<Env::Api, AggregatorStep<Env::Api>>>,
        Arg1: ProxyArg<ManagedVec<Env::Api, TokenAmount<Env::Api>>>,
        Arg2: ProxyArg<bool>,
        Arg3: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        steps: Arg0,
        limits: Arg1,
        egld_return: Arg2,
        protocol: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue2<BigUint<Env::Api>, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>>> {
        self.wrapped_tx
            .raw_call("aggregateEsdt")
            .argument(&steps)
            .argument(&limits)
            .argument(&egld_return)
            .argument(&protocol)
            .original_result()
    }

    pub fn aggregate<
        Arg0: ProxyArg<ManagedVec<Env::Api, AggregatorStep<Env::Api>>>,
        Arg1: ProxyArg<MultiValueEncoded<Env::Api, TokenAmount<Env::Api>>>,
    >(
        self,
        steps: Arg0,
        limits: Arg1,
    ) -> TxTypedCall<Env, From, To, (), Gas, ManagedVec<Env::Api, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("aggregate")
            .argument(&steps)
            .argument(&limits)
            .original_result()
    }

    pub fn get_claimable_protocol_fee<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        protocol: Arg0,
        from_idx: Arg1,
        to_idx: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, TokenAmount<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getClaimabeProtocolFee")
            .argument(&protocol)
            .argument(&from_idx)
            .argument(&to_idx)
            .original_result()
    }

    pub fn register_protocol_fee<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        fee_percent: Arg0,
        whitelist_address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("registerProtocolFee")
            .argument(&fee_percent)
            .argument(&whitelist_address)
            .original_result()
    }

    pub fn get_claimable_ashswap_fee<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        from_idx: Arg0,
        to_idx: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, TokenAmount<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getClaimabeAshswapFee")
            .argument(&from_idx)
            .argument(&to_idx)
            .original_result()
    }

    pub fn ashswap_fee_address(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAshswapFeeAddress")
            .original_result()
    }

    pub fn register_ashswap_fee<
        Arg0: ProxyArg<u64>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        fee_percent: Arg0,
        whitelist_address: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("registerAshswapFee")
            .argument(&fee_percent)
            .argument(&whitelist_address)
            .original_result()
    }

    pub fn protocol_fee_percent<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getProtocolFeePercent")
            .argument(&address)
            .original_result()
    }

    pub fn ashswap_fee_percent(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAshswapFeePercent")
            .original_result()
    }

    pub fn claim_protocol_fee<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        protocol: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimProtocolFee")
            .argument(&protocol)
            .original_result()
    }

    pub fn claim_protocol_fee_by_tokens<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedVec<Env::Api, TokenIdentifier<Env::Api>>>,
    >(
        self,
        protocol: Arg0,
        tokens: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimProtocolFeeByTokens")
            .argument(&protocol)
            .argument(&tokens)
            .original_result()
    }

    pub fn claim_ashswap_fee(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimAshswapFee")
            .original_result()
    }

    pub fn claim_ashswap_fee_by_tokens<
        Arg0: ProxyArg<ManagedVec<Env::Api, TokenIdentifier<Env::Api>>>,
    >(
        self,
        tokens: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimAshswapFeeByTokens")
            .argument(&tokens)
            .original_result()
    }

    pub fn egld_wrapper_address(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getEgldWrapperAddress")
            .original_result()
    }

    pub fn egld_wrapped_token_id(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getEgldWrappedTokenId")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq, Clone, ManagedVecItem)]
pub struct AggregatorStep<Api>
where
    Api: ManagedTypeApi,
{
    pub token_in: TokenIdentifier<Api>,
    pub token_out: TokenIdentifier<Api>,
    pub amount_in: BigUint<Api>,
    pub pool_address: ManagedAddress<Api>,
    pub function_name: ManagedBuffer<Api>,
    pub arguments: ManagedVec<Api, ManagedBuffer<Api>>,
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, PartialEq, Clone, ManagedVecItem)]
pub struct TokenAmount<Api>
where
    Api: ManagedTypeApi,
{
    pub token: TokenIdentifier<Api>,
    pub amount: BigUint<Api>,
}

#[type_abi]
#[derive(TopEncode)]
pub struct AggregatorEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub payment_in: ManagedVec<Api, EsdtTokenPayment<Api>>,
    pub payment_out: ManagedVec<Api, EsdtTokenPayment<Api>>,
}
